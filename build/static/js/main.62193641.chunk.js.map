{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","require","useStyles","makeStyles","theme","button","margin","spacing","handleSubmit","email","password","subject","message","emailList","a","console","log","post","result","App","useState","results","setResult","classes","setEmail","setEmailList","setPassword","setSubject","setMessage","hasValidInput","length","every","EmailValidator","style","textAlign","marginTop","Typography","color","fontWeight","fontSize","fontFamily","variant","TextField","id","label","value","onChange","e","target","type","autoComplete","multiline","helperText","error","Paper","elevation","width","padding","Button","className","startIcon","onClick","document","getElementById","click","hidden","event","file","files","reader","FileReader","onload","split","map","trim","readAsText","endIcon","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.62193641.chunk.js","sourcesContent":["import React from 'react';\nimport { Typography, TextField, Paper, Button } from \"@material-ui/core\";\nimport { useState } from \"react\"\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { makeStyles } from '@material-ui/core/styles';\nimport SendIcon from '@material-ui/icons/Send';\n\nimport * as EmailValidator from 'email-validator';\n\nconst axios = require('axios');\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nasync function handleSubmit(email, password, subject, message, emailList){\n  console.log(email);\n  console.log(password);\n  console.log(subject);\n  console.log(message);\n  console.log(emailList);\n  const result = await axios.post('https://email-rocket.netlify.app/.netlify/functions/email', {\n            \"email\" : email,\n            \"password\" : password,\n            \"subject\" : subject,\n            \"body\" : message,\n            \"emailList\" : emailList\n          })\n  console.log(result);\n  return result;\n\n}\nfunction App() {\n  const [results, setResult] = useState('');\n  const classes = useStyles();\n  const [email, setEmail] = useState('');\n  const [emailList, setEmailList] = useState([]);\n  const [password, setPassword] = useState('');\n  const [subject, setSubject] = useState('');\n  const [message, setMessage] = useState('');\n  const fileSelectHandler = (event) => {\n  let file = event.target.files[0];\n  let reader = new FileReader();\n\n  reader.onload = function (e) {\n    // The file's text will be printed here\n    setEmailList(e.target.result.split(\"\\n\").map((email) => email.trim()));\n  };\n  \n    reader.readAsText(file);\n  };\n\n  const hasValidInput = () => {\n    return (\n      email.length > 0 &&\n      emailList.length > 0 &&\n      password.length > 0 &&\n      subject.length > 0 &&\n      message.length > 0 &&\n      message.length < 1000 && \n      emailList.every((email) => EmailValidator.validate(email))\n    );\n  };\n\n  return <div style={{textAlign: \"center\", marginTop: 100 }}>\n\n      <Typography style={{color: \"#fff\", fontWeight: 'bold', fontSize: 112, fontFamily: 'Brown Pro'}}> Email Rocket </Typography>\n      <Typography variant = 'subtitle1' style={{color: \"#D3D3D3\", fontSize: 25}}> Ever wanted to send the same email to multiple receivers? Email Rocket is here for you! </Typography>\n\n\n        <TextField \n          style={{ marginTop: 20 }}\n          id=\"standard-basic\" \n          label=\"Email\" \n          value = {email}\n          onChange = {(e) => setEmail(e.target.value)}/>\n        <br/>  \n        \n        <TextField \n            style={{ marginTop: 20 }}\n            id=\"standard-password-input\"\n            label=\"Password\"\n            value = {password}\n            onChange = {(e) => setPassword(e.target.value)}\n            type=\"password\"\n            autoComplete=\"current-password\" />\n        <br/>\n        <TextField \n          style={{ marginTop: 20 }}\n          id=\"standard-textarea\"\n          label=\"Subject\"\n          value = {subject}\n          onChange = {(e) => setSubject(e.target.value)}\n          multiline/>\n        <br/>\n        <TextField \n          style={{ marginTop: 10 }}\n          id=\"standard-textarea\"\n          label=\"Message\"\n          value = {message}\n          onChange = {(e) => setMessage(e.target.value)}\n          multiline\n          helperText={`Character count: ${message.length}`}\n          error = {message.length>=1000}\n        />\n        <br/>\n\n    <Paper elevation={3} style={{ width: \"30%\", margin: \"auto\", marginTop: 20, padding: 20 }}>\n      <Typography variant=\"subtitle1\">Upload .txt file of emails (format: an email per line)</Typography>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.button}\n        startIcon={<CloudUploadIcon />}\n        onClick={() => document.getElementById(\"selectFile\").click()}\n        >\n        Upload\n      </Button>\n      <br/>\n      <input\n        id=\"selectFile\"\n        hidden\n        type=\"file\"\n        onChange={fileSelectHandler}/>\n\n      {emailList.length > 0 && (\n      <Typography variant=\"subtitle2\" style={{ marginTop: 20 }}>\n        {hasValidInput() ? `Emails Loaded: ${emailList.length}` : \"Error parsing email\"}\n      </Typography>\n    )}\n\n      <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className={classes.button}\n          endIcon={<SendIcon></SendIcon>}        \n          disabled={!hasValidInput()}\n          onClick= {async () => await handleSubmit(email, password, subject, message, emailList)}\n          value = {results}\n          onChange = {(e) => setResult(e.target.value)}\n        >\n          Send\n      </Button>\n\n      <Typography variant=\"subtitle\">{results}</Typography>\n\n    </Paper>\n\n    </div>; \n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}